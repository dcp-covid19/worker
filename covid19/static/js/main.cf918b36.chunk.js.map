{"version":3,"sources":["demoKeystore.js","components/StartWorkerButton.js","components/ProgressBar.js","components/WorkerProgressBars.js","components/StatsSummary.js","components/DCPLogo.js","components/MenuIcon.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["demoKeystore","noSleep","NoSleep","StartWorkerButton","updateStatus","useState","running","setRunning","useEffect","onStart","onStop","window","dcp","compute","supervisor","on","off","onClick","useCallback","a","nextRunning","countSpan","document","getElementById","wallet","Keystore","keystore","unlock","add","mine","enable","innerText","parseFloat","stopMining","disable","className","style","width","COLORS","ProgressBar","worker","index","incrementWorkerCount","decrementWorkerCount","isWorking","active","setActive","indeterminate","val","progress","setProgress","public","setPublic","onSliceStart","job","onSliceEnd","onSliceProgress","progressEv","isIndeterminate","maxIndex","Math","round","random","length","determinateProgressBar","height","backgroundColor","top","bottom","left","transition","indeterminateProgressBar","map","color","num","modifier","transitionDelay","key","transitionProperty","WorkerProgressBars","statusText","workers","setWorkers","activeWorkerCount","setActiveWorkerCount","onSandboxStart","filter","w","console","log","display","flexWrap","justifyContent","id","idx","StatsSummary","options","fetchFunc","fetch","resp","json","stats","initialState","delay","useAPIPolling","fontWeight","margin","fontSize","distSlices","uniqueIds","LogoSVG","xmlns","viewBox","fill","points","DCPLogo","MenuIcon","open","d","LINKS","label","href","Header","activeLink","hideDivider","navOpen","setNavOpen","toggleNav","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","setStatusText","newStatus","Error","src","alt","target","rel","Boolean","location","hostname","match","paymentAddress","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf918b36.chunk.js","sourcesContent":["const demoKeystore = {\"version\":3,\"id\":\"e7aea5cc-e223-4c85-8212-b8ba319bf9d0\",\"address\":\"96aff0879a2679a4a35b6172fa9d583e95b794af\",\"crypto\":{\"ciphertext\":\"a3c815aa7cfbddd6ccf37f0f87db5ce09014e26bbaf63d3aa0b516757eb10627\",\"cipherparams\":{\"iv\":\"f396d229b9c7678e4c0121bf848b6379\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"31ea91102a4534df50a735f15aceb12b429755b108afbd46ef2b1f8f9682c449\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"9d5506e9e3ed4773263afc457657f951bcb6667176a6870dd151c3e831c98bd8\"},\"label\":\"covid19-demo-worker-keystore\",\"flags\":0,\"developer\":0}\n\nexport default demoKeystore;","import React, { useState, useCallback, useEffect } from 'react';\nimport demoKeystore from '../demoKeystore';\nimport NoSleep from 'nosleep.js'\nconst noSleep = new NoSleep();\n\nconst StartWorkerButton = ({ updateStatus }) => {\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    const onStart = () => {\n      setRunning(true);\n    }\n    const onStop = () => {\n      setRunning(false);\n    }\n    window.dcp.compute.supervisor.on('start', onStart);\n    window.dcp.compute.supervisor.on('stop', onStop);\n\n    return () => {\n      window.dcp.compute.supervisor.off('start', onStart);\n      window.dcp.compute.supervisor.off('stop', onStop);\n    }\n  }, [setRunning]);\n\n  const onClick = useCallback(async () => {\n    const nextRunning = !running;\n    setRunning(nextRunning);\n\n    // Modify text on click (putting the Hack in hackathon)\n    let countSpan = document.getElementById('fighters-count');\n    \n    if (nextRunning) {\n      let keystore = await new window.dcp.wallet.Keystore(demoKeystore);\n      await keystore.unlock(null, 24 * 60 * 60);\n      window.dcp.wallet.add(keystore)\n      window.dcp.compute.mine(4);\n      noSleep.enable();\n      if (countSpan) countSpan.innerText = parseFloat(countSpan.innerText) + 1\n    } else {\n      window.dcp.compute.stopMining();\n      noSleep.disable();\n      updateStatus('ready')\n      if (countSpan) countSpan.innerText = parseFloat(countSpan.innerText) - 1\n    }\n  }, [running, updateStatus]);\n\n  return (\n    <button className={`btn btn-${running? 'outline-' : ''}success`} onClick={onClick} style={{ width: '100px' }}>\n      { running? 'Pause' : 'Start' }\n    </button>\n  );\n}\n\nexport default StartWorkerButton;\n","import React, { useEffect, useState, useCallback } from 'react';\n\nconst COLORS = [\"#e8bc14\", \"#c0ab10\", \"#87930b\", \"#587f07\", \"#367104\", \"#146300\"];\n\nconst ProgressBar = ({ worker, index, incrementWorkerCount, decrementWorkerCount }) => {\n  const [active, setActive] = useState(worker.isWorking);\n  const [progress, setProgress] = useState({indeterminate: true, val: worker.progress || 0});\n  const [, setPublic] = useState(worker.public || {});\n\n  useEffect(() => {\n    const onSliceStart = ({ job }) => {\n      setActive(true);\n      setProgress({indeterminate: false, val: 0});\n      setPublic(job);\n      incrementWorkerCount();\n    }\n\n    const onSliceEnd = () => {\n      setActive(false);\n      decrementWorkerCount();\n    }\n\n    const onSliceProgress = (progressEv) => {\n      if (progressEv.isIndeterminate) {\n        const maxIndex = Math.round(Math.random() * COLORS.length);\n        setProgress({indeterminate: true, val: maxIndex});\n      } else {\n        setProgress({indeterminate: false, val: progressEv.progress});\n      }\n      \n    }\n\n    worker.on('sliceStart', onSliceStart);\n    worker.on('sliceEnd', onSliceEnd);\n    worker.on('sliceProgress', onSliceProgress);\n    \n    return () => {\n      worker.off('sliceStart', onSliceStart);\n      worker.off('sliceEnd', onSliceEnd);\n      worker.off('sliceProgress', onSliceProgress);\n    }\n  }, [decrementWorkerCount, incrementWorkerCount, worker]);\n\n\n  const determinateProgressBar = useCallback( function(progress) {\n    return <div className=\"w-100 position-relative\" style={{ height: '4px', backgroundColor: '#E5E7E7' }}>\n      <div className=\"position-absolute\" style={{\n        top: 0, bottom: 0, left: 0,\n        width: `${progress.val}%`, \n        transition: 'width 0.1s ease',\n        backgroundColor: '#146300',\n      }} />\n    </div>\n  },[])\n\n  const indeterminateProgressBar = useCallback( function(progress) {\n    return <div className=\"position-relative\" style={{ height: '25px', backgroundColor: 'white', width: \"100px\" }}>\n      {\n        COLORS.map((color, num) => {\n          const backgroundColor = num < progress.val ? color : 'white';\n          const modifier = backgroundColor === 'white' ? COLORS.length - num : num\n          const transitionDelay = `${modifier*0.1}s`;\n          return <div key={num} className=\"position-absolute\" style={{\n            top: 0,\n            bottom: 0,\n            left: `${num*100/COLORS.length}%`,\n            backgroundColor,\n            transitionProperty: 'background-color',\n            transitionDelay,\n            width: `calc(${100/COLORS.length}% - 8px)`\n          }}></div>\n        })\n      }\n    </div>\n  },[])\n\n  return active && (\n    <div className=\"worker-status\">\n      <p>Worker {index+1} </p>\n        {progress.indeterminate? indeterminateProgressBar(progress) : determinateProgressBar(progress)}\n    </div>\n  );\n}\n\nexport default ProgressBar;","import React, { useEffect, useState, useCallback } from 'react';\nimport ProgressBar from './ProgressBar';\n// import { act } from 'react-dom/test-utils';\n\nconst WorkerProgressBars = ({updateStatus, statusText}) => {\n  const [workers, setWorkers] = useState([]);\n  const [activeWorkerCount, setActiveWorkerCount] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    const onSandboxStart = (worker) => {\n      setRunning(true);\n      setWorkers((workers) => [...workers, worker]);\n      worker.on('workerStop', () => {\n        setWorkers((workers) => workers.filter(w => w !== worker));\n      });\n    }\n\n    const onStart = () => {\n      console.log('worker progressbars on start called')\n      setRunning(true);\n    }\n\n    const onStop = () => {\n      console.log('on stop called')\n      setRunning(false);\n    }\n\n    window.dcp.compute.supervisor.on('sandboxStart', onSandboxStart);\n    window.dcp.compute.supervisor.on('start', onStart);\n    window.dcp.compute.supervisor.on('stop', onStop);\n\n    return () => {\n      window.dcp.compute.supervisor.off('sandboxStart', onSandboxStart);\n      window.dcp.compute.supervisor.off('start', onStart);\n      window.dcp.compute.supervisor.off('stop', onStop);\n    }\n  }, []);\n\n  const incrementWorkerCount = useCallback(()=>{\n    setActiveWorkerCount(activeWorkerCount+1)\n  },[activeWorkerCount])\n\n  const decrementWorkerCount = useCallback(()=>{\n    setActiveWorkerCount(activeWorkerCount-1)\n  },[activeWorkerCount])\n\n  useEffect(()=>{\n    if (running) {\n      activeWorkerCount === 0 ? updateStatus('waiting') : updateStatus('computing');\n    } else {\n      updateStatus('ready')\n    }\n  },[activeWorkerCount, running, updateStatus])\n\n  return (\n    <>\n      <div className=\"border p-3 m-0 mt-3\" style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-between\"}}>\n        <div className=\"status-area\">\n          <span className=\"font-weight-bold mr-2\">Status</span>\n          <span id=\"compute-status-span\">{statusText}</span>\n        </div>\n        <div className=\"status-area\">\n        <span className=\"font-weight-bold mr-2\">Task</span>\n          <span>COVID-19 Mapping</span>\n        </div>\n      </div>\n      { workers.map((worker, idx) => (\n        <ProgressBar worker={worker} key={worker.id} index={idx} incrementWorkerCount={incrementWorkerCount} decrementWorkerCount={decrementWorkerCount} />\n      ))}\n    </>\n  );\n}\n\nexport default WorkerProgressBars;\n","import React from 'react';\nimport useAPIPolling from 'use-api-polling'\n\nconst StatsSummary = () => {\n\n  const fetchFunc = async () => {\n    const resp = await fetch(\"https://covid19-scheduler.distributed.computer/scheduler/status5m.json\")\n    const stats = await resp.json()\n    return stats\n  }\n  \n  const options = {\n    fetchFunc,\n    initialState: {},\n    delay: 10 * 1000\n  }\n  \n  let stats = useAPIPolling(options)\n\n\n  return <div id=\"stats-summary\">\n    <p style={{fontWeight: \"bold\"}}>Status</p>\n    <p style={{margin: 0, fontSize: \"0.9em\"}}>(Updates every 5 minutes)</p>\n    <div className=\"console\">\n    {!stats.worker && \"Loading stats from network ...\"}\n    {stats.worker &&\n      <>\n        <p>Tasks on Network: {stats.worker.distSlices}</p>\n        <p>COVID-19 Fighters: <span id=\"fighters-count\">{stats.uniqueIds}</span></p>\n      </>\n    }\n    </div>\n  </div>\n\n}\n\nexport default StatsSummary;","import React from 'react';\n\nconst LogoSVG = () => (\n  <svg className=\"header-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 525.31 595.71\" height={55} width={50}>\n    <polygon style={{ fill: '#00a473' }} points=\"525.31 0 477.51 535.04 262.66 595.71 47.8 535.04 0 0 525.31 0\"/>\n    <polygon style={{ fill: '#6fc495' }} points=\"263.22 550.28 437.81 500.9 478.2 41.79 263.22 41.79 263.22 550.28\"/>\n    <polygon style={{ fill: '#ffde17' }} points=\"263.22 482.62 263.22 482.75 263.44 482.68 263.22 482.62\"/>\n    <polygon style={{ fill: '#ffde17' }} points=\"263.22 412.67 263.22 412.8 263.44 412.73 263.22 412.67\"/>\n    <polygon style={{ fill: '#fff' }} points=\"433.4 110.39 421.2 247.9 353.66 247.9 359.89 177.67 262.87 177.67 262.87 110.39 433.4 110.39\"/>\n    <polygon style={{ fill: '#fff' }} points=\"341.48 341.15 409.02 341.15 399.92 443.65 262.96 482.62 262.96 412.8 262.96 412.67 337 391.61 341.48 341.15\"/>\n    <polygon style={{ fill: '#e5e7e7' }} points=\"262.87 110.39 262.87 177.67 169.27 177.67 188.48 391.61 262.74 412.73 262.96 412.8 262.96 482.62 262.74 482.68 125.56 443.65 95.76 110.39 262.87 110.39\"/>\n  </svg>\n);\n\nconst DCPLogo = ({ className }) => (\n  <div className={`d-flex align-items-center ${className}`}>\n    <div className=\"header-logo-wrapper\">\n      <LogoSVG />\n    </div>\n    <h3 className=\"logo-heading\">Distributed.Computer</h3>\n  </div>\n);\n\nexport default DCPLogo;\n","import React from 'react';\n\nconst MenuIcon = ({ open }) => {\n  return open? (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n      <path d=\"M3 18h13v-2H3v2zm0-5h10v-2H3v2zm0-7v2h13V6H3zm18 9.59L17.42 12 21 8.41 19.59 7l-5 5 5 5L21 15.59z\"/>\n    </svg>\n  ) : (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/>\n    </svg>\n  );\n};\n\nexport default MenuIcon;\n","import React, {useState, useCallback} from 'react';\nimport DCPLogo from './DCPLogo';\nimport MenuIcon from './MenuIcon';\n\nconst LINKS = [\n  { label: 'Home', href: 'https://covid19.distributed.computer' },\n  { label: 'Researcher', href: 'https://covid19.apps.distributed.computer' },\n  { label: 'Worker', href: 'https://dcp.work/covid19' },\n];\n\nconst Header = ({ activeLink, hideDivider=false }) => {\n  const [navOpen, setNavOpen] = useState(false);\n\n  const toggleNav = useCallback(() => {\n    setNavOpen((open) => !open);\n  }, [setNavOpen]);\n\n  return (\n    <header className=\"main-header\">\n      <nav className=\"navbar navbar-expand-lg\">\n        <DCPLogo className=\"\"/>\n        <button className=\"navbar-toggler\" onClick={toggleNav} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <MenuIcon open={navOpen} />\n        </button>\n\n        <div className={`collapse navbar-collapse ${navOpen ? \"show\" : \"\"}`} id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            { LINKS.map(({ label, href }) => (\n              <li key={label} className=\"nav-item\">\n                <a href={href} className={`nav-link header-link ${activeLink === label? 'active' : ''}`}>{ label }</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n        </nav>\n      { !hideDivider && <div className=\"colored-divider\"></div> }\n    </header>\n  )\n}\n\nexport default Header;\n","import React, { useState, useCallback } from 'react';\nimport StartWorkerButton from './components/StartWorkerButton';\nimport WorkerProgressBars from './components/WorkerProgressBars';\nimport StatsSummary from './components/StatsSummary';\nimport Header from './components/Header';\n\nconst App = () => {\n  const [statusText, setStatusText] = useState();\n\n  const updateStatus = useCallback((newStatus)=>{\n    switch (newStatus) {\n      case 'ready':\n        setStatusText('Ready to Compute')\n        break;\n      case 'waiting':\n        setStatusText('Waiting for tasks ...');\n        break;\n      case 'computing':\n        setStatusText('Computing ...');\n        break\n      default:\n        throw new Error('Update status to one of three special values. Look at the code!')\n    }\n  },[])\n\n  return (\n    <>\n      <Header activeLink=\"Worker\" />\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div className=\"col-12 col-lg-5 order-2\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"d-flex align-items-center\">\n                  <img src=\"https://dcp-covid19.github.io/logo.svg\" alt=\"dcp-covid19 logo\"></img>\n                  <h4 className=\"mb-1 ml-2\">COVID-19 Mapping</h4>\n                </div>\n                <small>Join the fight against <span className=\"text-green\">COVID-19</span></small>\n\n                <StatsSummary />\n\n                <p style={{fontWeight: \"bold\"}}>Project Objective:</p>\n                <p>\n                  To better inform remediation strategies and public health interventions against COVID-19 for municipalities, provincial/federal authorities by mapping transmission patterns of diseases based on reports from epidemiologists and transportation data.\n                </p>\n\n                <p>\n                  The resulting micro-picture will inform community-specific public health interventions to maximize recovery and minimize economic impacts. This is a platform open to all epidemiologists.\n                </p>\n\n                <p className=\"font-weight-bold pt-4\">How DCP speeds up COVID-19 mapping with your computing power</p>\n                <p>\n                  Space-time patterns of spread span multiple scales due to complex disease ecological processes and biases from surveillance data generated from multi-jurisdictions with different sampling protocols requires a tremendous amount of computing power.\n                </p>\n                <p>\n                  The Distributed Compute Protocol (DCP) distributes computational workload across any device, anywhere, in order to speed up the overall computation. Many hands (computers) make light work!\n                </p>\n\n                <a href=\"https://distributed.computer\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-outline-success mt-4\">Learn More</a>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-7 p-3 order-lg-12 order-1\">\n            <h3 className=\"mb-4\">Compute for <span className=\"text-green\">COVID-19</span></h3>\n            <StartWorkerButton updateStatus={updateStatus} />\n            <WorkerProgressBars updateStatus={updateStatus} statusText={statusText}/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst PAYMENT_ADDRESS = '0xEf5E3EeCc782F63317dD4e4CaDAF3B37A80F99EB';\nwindow.dcp.compute.paymentAddress = PAYMENT_ADDRESS;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}