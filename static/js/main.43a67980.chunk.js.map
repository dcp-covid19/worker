{"version":3,"sources":["components/StartWorkerButton.js","components/WorkerProgressBars.js","../../dcp-covid19.github.io/components/DCPLogo.js","../../dcp-covid19.github.io/components/Header.js","App.js","serviceWorker.js","index.js"],"names":["StartWorkerButton","useState","running","setRunning","useEffect","onStart","onStop","window","dcp","compute","supervisor","on","off","onClick","useCallback","nextRunning","console","log","mine","stopMining","className","style","width","ProgressBar","worker","isWorking","active","setActive","progress","setProgress","public","setPublic","onSliceStart","job","onSliceEnd","onSliceProgress","height","backgroundColor","top","bottom","left","transition","WorkerProgressBars","workers","setWorkers","onSandboxStart","filter","w","map","key","id","LogoSVG","xmlns","viewBox","fill","points","DCPLogo","fontSize","LINKS","label","Header","activeLink","href","App","src","alt","Boolean","location","hostname","match","paymentAddress","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43a67980.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\n\nconst StartWorkerButton = ({ }) => {\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    const onStart = () => setRunning(true);\n    const onStop = () => setRunning(false);\n    window.dcp.compute.supervisor.on('start', onStart);\n    window.dcp.compute.supervisor.on('stop', onStop);\n\n    return () => {\n      window.dcp.compute.supervisor.off('start', onStart);\n      window.dcp.compute.supervisor.off('stop', onStop);\n    }\n  }, [setRunning]);\n\n  const onClick = useCallback(() => {\n    const nextRunning = !running;\n    setRunning(nextRunning);\n\n    if (nextRunning) {\n      console.log(\"Starting worker...\");\n      window.dcp.compute.mine();\n    } else {\n      window.dcp.compute.stopMining();\n    }\n  }, [running, setRunning]);\n\n  return (\n    <button className=\"btn btn-success\" onClick={onClick} style={{ width: '100px' }}>\n      { running? 'Stop' : 'Start' }\n    </button>\n  );\n}\n\nexport default StartWorkerButton;\n","import React, { useEffect, useState } from 'react';\n\nconst ProgressBar = ({ worker }) => {\n  const [active, setActive] = useState(worker.isWorking);\n  const [progress, setProgress] = useState(worker.progress || 0);\n  const [pub, setPublic] = useState(worker.public || {});\n\n  useEffect(() => {\n    const onSliceStart = ({ job }) => {\n      setActive(true);\n      setProgress(0);\n      setPublic(job);\n    }\n\n    const onSliceEnd = () => {\n      setActive(false);\n    }\n\n    const onSliceProgress = ({ progress }) => {\n      setProgress(progress);\n    }\n\n    worker.on('sliceStart', onSliceStart);\n    worker.on('sliceEnd', onSliceEnd);\n    worker.on('sliceProgress', onSliceProgress);\n    \n    return () => {\n      worker.off('sliceStart', onSliceStart);\n      worker.off('sliceEnd', onSliceEnd);\n      worker.off('sliceProgress', onSliceProgress);\n    }\n  }, [worker]);\n\n  return active && (\n    <div className=\"w-100 position-relative\" style={{ height: '4px', backgroundColor: '#E5E7E7' }}>\n      <div className=\"position-absolute\" style={{\n        top: 0, bottom: 0, left: 0,\n        width: `${progress}%`, transition: 'width 0.1s ease',\n        backgroundColor: '#146300',\n      }} />\n    </div>\n  );\n}\n\nconst WorkerProgressBars = () => {\n  const [workers, setWorkers] = useState([]);\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    const onSandboxStart = (worker) => {\n      setWorkers((workers) => [...workers, worker]);\n      worker.on('workerStop', () => {\n        setWorkers((workers) => workers.filter(w => w !== worker));\n      });\n    }\n\n    const onStart = () => {\n      setRunning(true);\n    }\n\n    const onStop = () => {\n      setRunning(false);\n    }\n\n    window.dcp.compute.supervisor.on('sandboxStart', onSandboxStart);\n    window.dcp.compute.supervisor.on('start', onStart);\n    window.dcp.compute.supervisor.on('stop', onStop);\n\n    return () => {\n      window.dcp.compute.supervisor.off('sandboxStart', onSandboxStart);\n      window.dcp.compute.supervisor.off('start', onStart);\n      window.dcp.compute.supervisor.off('stop', onStop);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"border d-flex align-items-center justify-content-between p-3 mt-3\">\n        <span>\n          <span className=\"font-weight-bold mr-4\">Status</span>\n          <span>{running? 'Computing' : 'Ready to Compute'}</span>\n        </span>\n        <span className=\"text-secondary\">Task: ACME</span>\n      </div>\n      { workers.map((worker) => (\n        <ProgressBar worker={worker} key={worker.id} />\n      ))}\n    </>\n  );\n}\n\nexport default WorkerProgressBars;\n","import React from 'react';\n\nconst LogoSVG = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 525.31 595.71\" height={55}>\n    <polygon style={{ fill: '#00a473' }} points=\"525.31 0 477.51 535.04 262.66 595.71 47.8 535.04 0 0 525.31 0\"/>\n    <polygon style={{ fill: '#6fc495' }} points=\"263.22 550.28 437.81 500.9 478.2 41.79 263.22 41.79 263.22 550.28\"/>\n    <polygon style={{ fill: '#ffde17' }} points=\"263.22 482.62 263.22 482.75 263.44 482.68 263.22 482.62\"/>\n    <polygon style={{ fill: '#ffde17' }} points=\"263.22 412.67 263.22 412.8 263.44 412.73 263.22 412.67\"/>\n    <polygon style={{ fill: '#fff' }} points=\"433.4 110.39 421.2 247.9 353.66 247.9 359.89 177.67 262.87 177.67 262.87 110.39 433.4 110.39\"/>\n    <polygon style={{ fill: '#fff' }} points=\"341.48 341.15 409.02 341.15 399.92 443.65 262.96 482.62 262.96 412.8 262.96 412.67 337 391.61 341.48 341.15\"/>\n    <polygon style={{ fill: '#e5e7e7' }} points=\"262.87 110.39 262.87 177.67 169.27 177.67 188.48 391.61 262.74 412.73 262.96 412.8 262.96 482.62 262.74 482.68 125.56 443.65 95.76 110.39 262.87 110.39\"/>\n  </svg>\n);\n\nconst DCPLogo = ({ className }) => (\n  <div className={`d-flex align-items-center ${className}`}>\n    <LogoSVG />\n    <span className=\"ml-3\" style={{ fontSize: '1.3rem' }}>Distributed.Computer</span>\n  </div>\n);\n\nexport default DCPLogo;\n","import React from 'react'; \nimport DCPLogo from './DCPLogo';\n\nconst LINKS = [\n  { label: 'Home' },\n  { label: 'Researcher' },\n  { label: 'Worker' },\n];\n\nconst Header = ({ activeLink }) => (\n  <>\n    <div className=\"container-fluid d-flex align-items-center justify-content-between p-4\">\n      <DCPLogo className=\"ml-4\"/>\n      <span className=\"mr-2\">\n        { LINKS.map(({ label }) => (\n          <a href=\"#\" className={`mr-4 header-link ${activeLink === label? 'active' : ''}`}>{ label }</a>\n        ))}\n      </span>\n    </div>\n    <div className=\"colored-divider\"></div>\n  </>\n)\n\nexport default Header;\n","import React from 'react';\nimport StartWorkerButton from './components/StartWorkerButton';\nimport WorkerProgressBars from './components/WorkerProgressBars';\nimport Header from 'dcp-covid19.github.io/components/Header';\n\nfunction App() {\n  return (\n    <>\n      <Header activeLink=\"Worker\" />\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div className=\"col-12 col-md-5\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"d-flex align-items-center\">\n                  <img src=\"https://dcp-covid19.github.io/logo.svg\" alt=\"dcp-covid19 logo\"></img>\n                  <h4 className=\"mb-1 ml-2\">ACME Study</h4>\n                </div>\n                <small>How it helps fighting <span className=\"text-green\">COVID-19</span></small>\n\n                <div className=\"w-100 mt-4 mb-4\" style={{ backgroundColor: '#e5e7e7', height: '100px' }} />\n\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Elementum sapien massa eget orci ultrices ullamcorper feugiat.</p>\n                <p>Dictum et suspendisse id placerat maecenas tempus. Nisi in pellentesque est, ut tempor a nibh. Ut mauris scelerisque arcu ipsum. Imperdiet ultricies convallis vel ut pulvinar at quisque. Velit mi nulla libero tellus curabitur phasellus scelerisque nec.</p>\n\n                <p className=\"font-weight-bold pt-4\">How DCP Worker speed up ACME with your compute power</p>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Elementum sapien massa eget orci ultrices ullamcorper feugiat.</p>\n                <p>Vitae donec sed quam enim nisl porta elementum. Id consequat lacus tellus, auctor condimentum arcu adipiscing.</p>\n\n                <button className=\"btn btn-outline-success mt-4\">Learn More</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-md-7 p-3\">\n            <h3 className=\"mb-4\">Compute <span className=\"text-green\">ACME</span></h3>\n            <StartWorkerButton />\n            <WorkerProgressBars />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst PAYMENT_ADDRESS = '0xA225B64d0D2253C0BD57B3cEa8b04a1A8d65548a';\nwindow.dcp.compute.paymentAddress = PAYMENT_ADDRESS;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}